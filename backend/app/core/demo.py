"""
Demo mode functionality for when no external services are configured.
Provides mock responses so users can explore the template immediately.
"""

import json
from typing import Dict, Any
import uuid
from datetime import datetime


class DemoService:
    """Provides demo/mock responses when external services aren't configured."""
    
    def __init__(self):
        self.demo_users = {
            "demo@vibestack.dev": {
                "id": str(uuid.uuid4()),
                "email": "demo@vibestack.dev", 
                "name": "Demo User",
                "created_at": datetime.now().isoformat()
            }
        }
    
    def get_demo_user(self) -> Dict[str, Any]:
        """Returns a demo user for authentication."""
        return self.demo_users["demo@vibestack.dev"]
    
    def mock_llm_response(self, prompt: str, model: str = "demo") -> Dict[str, Any]:
        """Returns a mock AI response based on the prompt."""
        
        # Simple keyword-based responses for demo
        responses = {
            "motivation": "ðŸš€ You're building something amazing with the Vibe Stack! This template gives you authentication, AI integration, and a solid foundation. Keep coding, keep vibing! âœ¨",
            
            "vibe": "The vibe is immaculate! ðŸŒŸ You're using a modern full-stack template with Next.js, FastAPI, and AI integration. Perfect for rapid prototyping and shipping fast.",
            
            "hello": "Hey there, vibe coder! ðŸ‘‹ Welcome to the Vibe Stack. This is a demo response showing how AI integration works. In production, this would be powered by OpenAI or Claude.",
            
            "test": "This is a test response from the demo mode! The Vibe Stack is working perfectly. When you add your API keys, this will connect to real AI services.",
            
            "default": f"This is a demo response to your prompt: '{prompt[:50]}...' - In production mode with API keys, this would be generated by {model}. The Vibe Stack makes AI integration super easy! ðŸ¤–âœ¨"
        }
        
        # Find matching response based on keywords
        prompt_lower = prompt.lower()
        for keyword, response in responses.items():
            if keyword in prompt_lower:
                return {
                    "content": response,
                    "model": f"{model} (demo mode)",
                    "tokens_used": len(response),
                    "demo": True
                }
        
        return {
            "content": responses["default"],
            "model": f"{model} (demo mode)", 
            "tokens_used": len(responses["default"]),
            "demo": True
        }
    
    def is_demo_mode(self, supabase_url: str = None, openai_key: str = None, demo_mode_env: str = None) -> bool:
        """Check if we should run in demo mode."""
        # Explicit demo mode override
        if demo_mode_env:
            return demo_mode_env.lower() in ['true', '1', 'yes', 'on']
        
        # Auto-detect: demo mode if no keys
        return not supabase_url or not openai_key or supabase_url == "demo"


# Global demo service instance
demo_service = DemoService()